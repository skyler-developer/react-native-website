/*! For license information please see 53331f41.88d0dff2.js.LICENSE.txt */
"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[75283],{23014:(e,n,t)=>{t.d(n,{ZP:()=>s,d$:()=>o});var i=t(24246),r=t(71670);const o=[];function a(e){const n={a:"a",admonition:"admonition",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(n.admonition,{title:"\u6ce8\u610f",type:"caution",children:[(0,i.jsxs)(n.p,{children:["\u8fd9\u4e2a\u6587\u6863\u4ecd\u7136\u662f",(0,i.jsx)(n.strong,{children:"\u5b9e\u9a8c\u6027"}),"\u7684\uff0c\u968f\u7740\u6211\u4eec\u7684\u8fed\u4ee3\uff0c\u7ec6\u8282\u4f1a\u6709\u53d8\u5316\u3002\u6b22\u8fce\u5728",(0,i.jsx)(n.a,{href:"https://github.com/reactwg/react-native-new-architecture/discussions/8",children:"\u5de5\u4f5c\u5c0f\u7ec4\u5185\u7684\u8ba8\u8bba"}),"\u4e2d\u5206\u4eab\u4f60\u7684\u53cd\u9988\u3002"]}),(0,i.jsxs)(n.p,{children:["\u6b64\u5916\uff0c\u5b83\u8fd8\u5305\u542b\u51e0\u4e2a",(0,i.jsx)(n.strong,{children:"\u624b\u52a8\u6b65\u9aa4"}),"\u3002\u8bf7\u6ce8\u610f\u65b0\u67b6\u6784\u5c1a\u672a\u7a33\u5b9a\u4e0b\u6765\uff0c\u6700\u7ec8\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u4f1a\u7ee7\u7eed\u8fed\u4ee3\u6539\u5584\u3002\u6211\u4eec\u6b63\u5728\u52aa\u529b\u5f00\u53d1\u5de5\u5177\u3001\u6a21\u677f\u548c\u5e93\uff0c\u4ee5\u5e2e\u52a9\u4f60\u5728\u65b0\u67b6\u6784\u4e0a\u5feb\u901f\u5165\u95e8\uff0c\u800c\u4e0d\u9700\u8981\u7ecf\u5386\u6574\u4e2a\u8bbe\u7f6e\u8fc7\u7a0b\u3002"]})]})}function s(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},75987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var i=t(24246),r=t(71670),o=t(23014);const a={id:"new-architecture-app-renderer-android",title:"\u5728 Android \u4e0a\u542f\u7528 Fabric"},s=void 0,c={id:"new-architecture-app-renderer-android",title:"\u5728 Android \u4e0a\u542f\u7528 Fabric",description:"Make sure your application meets all the prerequisites.",source:"@site/versioned_docs/version-0.71/new-architecture-app-renderer-android.md",sourceDirName:".",slug:"/new-architecture-app-renderer-android",permalink:"/docs/0.71/new-architecture-app-renderer-android",draft:!1,unlisted:!1,editUrl:"https://github.com/reactnativecn/react-native-website/blob/production/cnwebsite/../cndocs/new-architecture-app-renderer-android.md",tags:[],version:"0.71",frontMatter:{id:"new-architecture-app-renderer-android",title:"\u5728 Android \u4e0a\u542f\u7528 Fabric"},sidebar:"docs",previous:{title:"\u5728 iOS \u4e0a\u542f\u7528 TurboModule",permalink:"/docs/0.71/new-architecture-app-modules-ios"},next:{title:"\u5728 iOS \u4e0a\u542f\u7528 Fabric",permalink:"/docs/0.71/new-architecture-app-renderer-ios"}},l={},d=[...o.d$,{value:"1. Provide a <code>JSIModulePackage</code> inside your <code>ReactNativeHost</code>",id:"1-provide-a-jsimodulepackage-inside-your-reactnativehost",level:2},{value:"2. Make sure your call <code>setIsFabric</code> on your Activity\u2019s <code>ReactRootView</code>",id:"2-make-sure-your-call-setisfabric-on-your-activitys-reactrootview",level:2},{value:"Migrating Android ViewManagers",id:"migrating-android-viewmanagers",level:2},{value:"JavaScript changes",id:"javascript-changes",level:3},{value:"Native/Java Changes",id:"nativejava-changes",level:3},{value:"Native/C++ Changes",id:"nativec-changes",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.ZP,{}),"\n",(0,i.jsxs)(n.p,{children:["Make sure your application meets all the ",(0,i.jsx)(n.a,{href:"new-architecture-app-intro",children:"prerequisites"}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"1-provide-a-jsimodulepackage-inside-your-reactnativehost",children:["1. Provide a ",(0,i.jsx)(n.code,{children:"JSIModulePackage"})," inside your ",(0,i.jsx)(n.code,{children:"ReactNativeHost"})]}),"\n",(0,i.jsxs)(n.p,{children:["In order to enable Fabric in your app, you would need to add a ",(0,i.jsx)(n.code,{children:"JSIModulePackage"})," inside your ",(0,i.jsx)(n.code,{children:"ReactNativeHost"}),". If you followed the TurboModule section of this guide, you probably already know where to find your ",(0,i.jsx)(n.code,{children:"ReactNativeHost"}),". If not, you can locate your ",(0,i.jsx)(n.code,{children:"ReactNativeHost"})," by searching for the ",(0,i.jsx)(n.code,{children:"getReactNativeHost()"}),". The ",(0,i.jsx)(n.code,{children:"ReactNativeHost"})," is usually located inside your ",(0,i.jsx)(n.code,{children:"Application"})," class."]}),"\n",(0,i.jsxs)(n.p,{children:["Once you located it, you need to add the ",(0,i.jsx)(n.code,{children:"getJSIModulePackage"})," method as from the snippet below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"title='MyApplication.java'",children:"public class MyApplication extends Application implements ReactApplication {\n\n  private final ReactNativeHost mReactNativeHost =\n    new ReactNativeHost(this) {\n\n      // Add those lines:\n      @Nullable\n      @Override\n      protected JSIModulePackage getJSIModulePackage() {\n        return new JSIModulePackage() {\n          @Override\n          public List<JSIModuleSpec> getJSIModules(\n              final ReactApplicationContext reactApplicationContext,\n              final JavaScriptContextHolder jsContext) {\n            final List<JSIModuleSpec> specs = new ArrayList<>();\n            specs.add(new JSIModuleSpec() {\n              @Override\n              public JSIModuleType getJSIModuleType() {\n                return JSIModuleType.UIManager;\n              }\n\n              @Override\n              public JSIModuleProvider<UIManager> getJSIModuleProvider() {\n                final ComponentFactory componentFactory = new ComponentFactory();\n                CoreComponentsRegistry.register(componentFactory);\n                final ReactInstanceManager reactInstanceManager = getReactInstanceManager();\n\n                ViewManagerRegistry viewManagerRegistry =\n                    new ViewManagerRegistry(\n                        reactInstanceManager.getOrCreateViewManagers(\n                            reactApplicationContext));\n\n                return new FabricJSIModuleProvider(\n                    reactApplicationContext,\n                    componentFactory,\n                    new EmptyReactNativeConfig(),\n                    viewManagerRegistry);\n              }\n            });\n            return specs;\n          }\n        };\n      }\n    };\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"2-make-sure-your-call-setisfabric-on-your-activitys-reactrootview",children:["2. Make sure your call ",(0,i.jsx)(n.code,{children:"setIsFabric"})," on your Activity\u2019s ",(0,i.jsx)(n.code,{children:"ReactRootView"})]}),"\n",(0,i.jsxs)(n.p,{children:["Inside your ",(0,i.jsx)(n.code,{children:"Activity"})," class, you need to make sure you\u2019re calling ",(0,i.jsx)(n.code,{children:"setIsFabric"})," on the ",(0,i.jsx)(n.code,{children:"ReactRootView"}),".\nIf you don\u2019t have a ",(0,i.jsx)(n.code,{children:"ReactActivityDelegate"})," you might need to create one."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class MainActivity extends ReactActivity {\n\n  // Add the Activity Delegate, if you don't have one already.\n  public static class MainActivityDelegate extends ReactActivityDelegate {\n\n    public MainActivityDelegate(ReactActivity activity, String mainComponentName) {\n      super(activity, mainComponentName);\n    }\n\n    @Override\n    protected ReactRootView createRootView() {\n      ReactRootView reactRootView = new ReactRootView(getContext());\n\n      // Make sure to call setIsFabric(true) on your ReactRootView\n      reactRootView.setIsFabric(true);\n      return reactRootView;\n    }\n  }\n\n  // Make sure to override the `createReactActivityDelegate()` method.\n  @Override\n  protected ReactActivityDelegate createReactActivityDelegate() {\n    return new MainActivityDelegate(this, getMainComponentName());\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The crucial part in this code is the ",(0,i.jsx)(n.code,{children:"reactRootView.setIsFabric(true)"})," which will enable the new renderer for this Activity."]}),"\n",(0,i.jsx)(n.p,{children:"You can now verify that everything works correctly by running your android app:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn react-native run-android\n"})}),"\n",(0,i.jsx)(n.p,{children:"In your Metro terminal log, you will now see the following log to confirm that Fabric is running correctly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'BUNDLE ./App.js\nLOG Running "App" with {"fabric":true,"initialProps":{},"rootTag":1}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"migrating-android-viewmanagers",children:"Migrating Android ViewManagers"}),"\n",(0,i.jsxs)(n.p,{children:["First, make sure you followed the instructions to ",(0,i.jsx)(n.a,{href:"#enabling-the-new-renderer-fabric-in-your-android-application",children:"Enabling the New Renderer (Fabric) in Your Android Application"}),". Plus we will also assume that you followed the instructions from ",(0,i.jsx)(n.a,{href:"#enabling-the-new-nativemodule-system-turbomodule-in-your-android-application",children:"Enabling the New NativeModule System (TurboModule) in Your Android Application"})," as the Makefile (",(0,i.jsx)(n.code,{children:"Android.mk"}),") and other native builds setup steps are presented over there and won\u2019t be repeated here."]}),"\n",(0,i.jsx)(n.h3,{id:"javascript-changes",children:"JavaScript changes"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Make sure your other JS changes are ready to go by following Preparing your JavaScript codebase for the new React Native Renderer (Fabric)"}),"\n",(0,i.jsxs)(n.li,{children:["Replace the call to ",(0,i.jsx)(n.code,{children:"requireNativeComponent"})," with ",(0,i.jsx)(n.code,{children:"codegenNativeComponent"}),". This tells the JS codegen to start generating the native implementation of the component, consisting of C++ and Java classes. This is how it looks for the WebView component:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\n// babel-plugin-codegen will replace the function call to use NativeComponentRegistry\n// 'RCTWebView' is interopped by RCTFabricComponentsPlugins\n\nexport default (codegenNativeComponent<NativeProps>(\n  'RCTWebView',\n): HostComponent<NativeProps>);\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"[Flow users]"})," Make sure your native component has Flow types for its props, since the JS codegen uses these types to generate the type-safe native implementation of the component. The codegen generates C++ classes during the build time, which guarantees that the native implementation is always up-to-date with its JS interface. Use ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/react-native/blob/main/Libraries/Types/CodegenTypes.js#L28-L30",children:"these c++ compatible types"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="RNTMyNativeViewNativeComponent.js"',children:"import type {Int32} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport type {HostComponent} from 'react-native';\nimport type {ViewProps} from 'react-native/Libraries/Components/View/ViewPropTypes';\n\ntype NativeProps = $ReadOnly<{|\n  ...ViewProps, // This is required.\n  someNumber: Int32,\n|}>;\n\n[...]\n\nexport default (codegenNativeComponent<NativeProps>(\n  'RNTMyNativeView',\n): HostComponent<NativeProps>);\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"[TypeScript users]"})," We are currently investigating a support for TypeScript."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"nativejava-changes",children:"Native/Java Changes"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Update (or Create) your ViewManager to use the generated classes from the Codegen."})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Specifically you will have to implement the generated ",(0,i.jsx)(n.strong,{children:"ViewManagerInterface"})," and to pass events to the generated ",(0,i.jsx)(n.strong,{children:"ViewManagerDelegate."}),"\nYour ViewManager could follow this structure. The MyNativeView class in this example is an Android View implementation (like a subclass of LinearLayout, Button, TextView, etc.)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"title='MyNativeViewManager.java'",children:'// View manager for MyNativeView components.\n@ReactModule(name = MyNativeViewManager.REACT_CLASS)\npublic class MyNativeViewManager extends SimpleViewManager<MyNativeView>\n        implements RNTMyNativeViewManagerInterface<MyNativeView> {\n\n  public static final String REACT_CLASS = "RNTMyNativeView";\n\n  private final ViewManagerDelegate<MyNativeView> mDelegate;\n\n  public MyNativeViewManager() {\n    mDelegate = new RNTMyNativeViewManagerDelegate<>(this);\n  }\n\n  @Nullable\n  @Override\n  protected ViewManagerDelegate<MyNativeView> getDelegate() {\n    return mDelegate;\n  }\n\n  @NonNull\n  @Override\n  public String getName() {\n    return REACT_CLASS;\n  }\n\n  @NonNull\n  @Override\n  protected MyNativeView createViewInstance(@NonNull ThemedReactContext reactContext) {\n    return new MyNativeView(reactContext);\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Add your ViewManager to one of the Packages loaded by your Application."})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Specifically inside the ",(0,i.jsx)(n.code,{children:"ReactNativeHost"})," , update ",(0,i.jsx)(n.code,{children:"getPackages"})," method to include the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class MyApplication extends Application implements ReactApplication {\n\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n    @Override\n    public boolean getUseDeveloperSupport() { /* ... */ }\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n      List<ReactPackage> packages = new PackageList(this).getPackages();\n\n      // ... other packages or `TurboReactPackage added` here...\n\n      // Add those lines.\n      packages.add(new ReactPackage() {\n        @NonNull\n        @Override\n        public List<NativeModule> createNativeModules(\n            @NonNull ReactApplicationContext reactContext) {\n          return Collections.emptyList();\n        }\n\n        @NonNull\n        @Override\n        public List<ViewManager> createViewManagers(\n            @NonNull ReactApplicationContext reactContext) {\n          // Your ViewManager is returned here.\n          return Collections.singletonList(new MyNativeViewManager());\n        }\n      });\n      return packages;\n    }\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Add a Fabric Component Registry"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You need to create a new component Registry that will allow you to ",(0,i.jsx)(n.strong,{children:"register"})," your components to be discovered by Fabric. Let\u2019s create the ",(0,i.jsx)(n.code,{children:"MyComponentsRegistry"})," file with the following content."]}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, some methods are ",(0,i.jsx)(n.code,{children:"native()"})," which we will implement in C++ in the following paragraph."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.awesomeproject;\n\nimport com.facebook.jni.HybridData;\nimport com.facebook.proguard.annotations.DoNotStrip;\nimport com.facebook.react.fabric.ComponentFactory;\nimport com.facebook.soloader.SoLoader;\n\n@DoNotStrip\npublic class MyComponentsRegistry {\n  static {\n    SoLoader.loadLibrary("fabricjni");\n  }\n\n  @DoNotStrip private final HybridData mHybridData;\n\n  @DoNotStrip\n  private native HybridData initHybrid(ComponentFactory componentFactory);\n\n  @DoNotStrip\n  private MyComponentsRegistry(ComponentFactory componentFactory) {\n    mHybridData = initHybrid(componentFactory);\n  }\n\n  @DoNotStrip\n  public static MyComponentsRegistry register(ComponentFactory componentFactory) {\n    return new MyComponentsRegistry(componentFactory);\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Register your custom Fabric Component Registry"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Finally, let\u2019s edit the ",(0,i.jsx)(n.code,{children:"getJSIModulePackage"})," from the ",(0,i.jsx)(n.code,{children:"ReactNativeHost"})," to also register your Component Registry alongside the Core one:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class MyApplication extends Application implements ReactApplication {\n\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n    @Nullable\n    @Override\n    protected JSIModulePackage getJSIModulePackage() {\n      return new JSIModulePackage() {\n        @Override\n        public List<JSIModuleSpec> getJSIModules(\n                final ReactApplicationContext reactApplicationContext,\n                final JavaScriptContextHolder jsContext) {\n          final List<JSIModuleSpec> specs = new ArrayList<>();\n          specs.add(new JSIModuleSpec() {\n            // ...\n\n            @Override\n            public JSIModuleProvider<UIManager> getJSIModuleProvider() {\n              final ComponentFactory componentFactory = new ComponentFactory();\n              CoreComponentsRegistry.register(componentFactory);\n\n              // Add this line just below CoreComponentsRegistry.register\n              MyComponentsRegistry.register(componentFactory);\n\n              // ...\n            }\n          });\n          return specs;\n        }\n      };\n    }\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"nativec-changes",children:"Native/C++ Changes"}),"\n",(0,i.jsxs)(n.p,{children:["It\u2019s now time to provide an implementation for your ",(0,i.jsx)(n.code,{children:"MyComponentsRegistry"})," in C++:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Create a header file: ",(0,i.jsx)(n.code,{children:"MyComponentsRegistry.h"})]})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The file should be placed inside the ",(0,i.jsx)(n.code,{children:"src/main/jni"})," folder.\nPlease note that the ",(0,i.jsx)(n.code,{children:"kJavaDescriptor"})," should be adapted to follow the package name you picked for your project."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="MyComponentsRegistry.h"',children:'#pragma once\n\n#include <ComponentFactory.h>\n#include <fbjni/fbjni.h>\n#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>\n#include <react/renderer/componentregistry/ComponentDescriptorRegistry.h>\n\nnamespace facebook {\nnamespace react {\n\nclass MyComponentsRegistry\n    : public facebook::jni::HybridClass<MyComponentsRegistry> {\n  public:\n  constexpr static auto kJavaDescriptor =\n      "Lcom/awesomeproject/MyComponentsRegistry;";\n\n  static void registerNatives();\n\n  MyComponentsRegistry(ComponentFactory *delegate);\n\n  private:\n  friend HybridBase;\n\n  static std::shared_ptr<ComponentDescriptorProviderRegistry const>\n  sharedProviderRegistry();\n\n  const ComponentFactory *delegate_;\n\n  static jni::local_ref<jhybriddata> initHybrid(\n      jni::alias_ref<jclass>,\n      ComponentFactory *delegate);\n};\n\n} // namespace react\n} // namespace facebook\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Create an implementation file: ",(0,i.jsx)(n.code,{children:"MyComponentsRegistry.cpp"})]})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The file should be placed inside the ",(0,i.jsx)(n.code,{children:"src/main/jni"})," folder alongside `MyComponentsRegistry.h"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="MyComponentsRegistry.cpp"',children:'#include "MyComponentsRegistry.h"\n\n#include <CoreComponentsRegistry.h>\n#include <fbjni/fbjni.h>\n#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>\n#include <react/renderer/components/rncore/ComponentDescriptors.h>\n#include <react/renderer/components/samplelibrary/ComponentDescriptors.h>\n\nnamespace facebook {\nnamespace react {\n\nMyComponentsRegistry::MyComponentsRegistry(\n    ComponentFactory *delegate)\n    : delegate_(delegate) {}\n\nstd::shared_ptr<ComponentDescriptorProviderRegistry const>\nMyComponentsRegistry::sharedProviderRegistry() {\n  auto providerRegistry = CoreComponentsRegistry::sharedProviderRegistry();\n\n  providerRegistry->add(concreteComponentDescriptorProvider<\n                        RNTMyNativeViewComponentDescriptor>());\n\n  return providerRegistry;\n}\n\njni::local_ref<MyComponentsRegistry::jhybriddata>\nMyComponentsRegistry::initHybrid(\n    jni::alias_ref<jclass>,\n    ComponentFactory *delegate) {\n  auto instance = makeCxxInstance(delegate);\n\n  auto buildRegistryFunction =\n      [](EventDispatcher::Weak const &eventDispatcher,\n          ContextContainer::Shared const &contextContainer)\n      -> ComponentDescriptorRegistry::Shared {\n    auto registry = MyComponentsRegistry::sharedProviderRegistry()\n                        ->createComponentDescriptorRegistry(\n                            {eventDispatcher, contextContainer});\n\n    auto mutableRegistry =\n        std::const_pointer_cast<ComponentDescriptorRegistry>(registry);\n\n    mutableRegistry->setFallbackComponentDescriptor(\n        std::make_shared<UnimplementedNativeViewComponentDescriptor>(\n            ComponentDescriptorParameters{\n                eventDispatcher, contextContainer, nullptr}));\n\n    return registry;\n  };\n\n  delegate->buildRegistryFunction = buildRegistryFunction;\n  return instance;\n}\n\nvoid MyComponentsRegistry::registerNatives() {\n  registerHybrid({\n      makeNativeMethod("initHybrid", MyComponentsRegistry::initHybrid),\n  });\n}\n\n} // namespace react\n} // namespace facebook\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Load your file in the OnLoad.cpp"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If you followed the TurboModule instructions, you should have a ",(0,i.jsx)(n.code,{children:"OnLoad.cpp"})," file inside the ",(0,i.jsx)(n.code,{children:"src/main/jni"})," folder. There you should add a line to load the ",(0,i.jsx)(n.code,{children:"MyComponentsRegistry"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="OnLoad.cpp"',children:'#include <fbjni/fbjni.h>\n#include "MyApplicationTurboModuleManagerDelegate.h"\n// Add this import\n#include "MyComponentsRegistry.h"\n\nJNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *) {\n  return facebook::jni::initialize(vm, [] {\n    facebook::react::MyApplicationTurboModuleManagerDelegate::registerNatives();\n\n    // Add this line\n    facebook::react::MyComponentsRegistry::registerNatives();\n  });\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can now verify that everything works correctly by running your android app:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn react-native run-android\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},71426:(e,n,t)=>{var i=t(27378),r=Symbol.for("react.element"),o=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,t){var i,o={},l=null,d=null;for(i in void 0!==t&&(l=""+t),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(d=n.ref),n)a.call(n,i)&&!c.hasOwnProperty(i)&&(o[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===o[i]&&(o[i]=n[i]);return{$$typeof:r,type:e,key:l,ref:d,props:o,_owner:s.current}}n.Fragment=o,n.jsx=l,n.jsxs=l},24246:(e,n,t)=>{e.exports=t(71426)},71670:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>a});var i=t(27378);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);